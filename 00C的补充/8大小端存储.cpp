//
// Created by qin on 19-1-4.
//

//#include <iostream>
//using namespace std;
//
//int main()
//{
//    // 测试大小端存储
//    int i = 134480385;
//    char* p = (char*)&i;
//    printf("%p, %d\n%p, %d\n%p, %d\n%p, %d\n", &p[0], p[0], &p[1], p[1], &p[2], p[2], &p[3], p[3]); // 测试结果是小端存储
//    cout << (void*)&p[0] << ", " << (int)p[0] << endl;      // 如果用cout打印，必须先强转类型
//
//    return 0;
//}


/*
 * 1.大小端存储与内存对齐都是计算机存储数据的方式，其中内存对齐决定数据存储的首地址，大小端存储决定数据高低位存储的顺序。
 * 2.对于数据来说，比如二进制，左边是数据的高位，右边是数据的低位。
 * 3.对于地址来说，按照其在内存中的排列顺序，右边的地址比左边要大，所以右边是地址高位，左边是地址低位。
 * 4.小端存储：数据的高位存在地址的高位（视觉上反着存）；大段存储：数据的高位存在地址的低位。小端存储如下：
 *                      0000 1000 0000 0100 0000 0010 0000 0001
 *                      数据高位                         数据低位
 *                     -----------------------------------------
 *            小端存储：|0000 0001|0000 0010|0000 0100|0000 1000|
 *                     -----------------------------------------
 *                        0x10      0x11      0x12      0x13
 *                      地址低位                         地址高位
 * 5.小端存储应用于个人电脑，因此只要记住小端存储就可以了；大端存储应用于网络。
 * 6.由于电脑对内存的读取是从地址高位到低位的，也就是从右向左的，因此为了从高位向低位读取数据，要将左边的数据高位存到右边的地址高位。
 * 7.大小端存储测试的2种方式：1）强转指针类型：先定义int类型指针，存储值之后，再强转为char类型指针依次读取4个字节的数据；2）联合：定义
 *   一个联合让int类型和char型数组共用空间，因此可以利用char型数组依次访问int类型变量的4个字节的数据。
 */