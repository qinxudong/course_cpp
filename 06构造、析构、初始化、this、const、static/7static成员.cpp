//
// Created by qin on 18-12-4.
//

#include <iostream>
using namespace std;


class C
{
public:
    static int a;               // 静态变量
    static const int aa = 11;
    int b = 14;                 // 与课程中不同，这里直接初始化也可以
    float c = 12.12f;           // 整形，非整形都可以
    const int d = 15;           // 常量数据成员也可以

    static void func()
    {
        cout << "STATIC FUNCTION" << endl;
    }

//    C(): a(12)                // 静态变量不能用初始化列表初始化
    C()
    {
        a = 12;
    }
};

int C::a = 13;                  // 静态数据成员类外初始化

int main()
{
    cout << C::a << endl;       // 通过类名作用域调用静态数据成员
//    cout << C::b << endl;     // 普通成员不能通过类名作用域直接调用
    cout << C::aa << endl;

    C c;
    cout << c.a << endl;        // 通过实例化对象调用静态数据成员
    cout << c.b << " " << c.c << " " << c.d << endl;

    C::func();                  // 通过类名作用域调用静态函数成员
    c.func();                   // 通过实例化对象调用静态函数成员

    return 0;
}


/*
 * 1.静态成员(变量/函数)会在类定义时在静态区分配内存，因此在实例化对象前就存在，其与类绑定，与对象无关。实例化多个对象时，会分别(在栈/堆
 *   区)分配内存，对象与对象之间相互独立。但静态成员只会有一块内存，因此通用于所有对象。对象们可以对这块静态区内存进行操作，共同影响静态
 *   成员。
 * 2.静态数据成员必须类外初始化。
 * 3.静态成员除了可以实例化对象后调用，其本身可以直接通过类名作用域调用。数据成员和函数成员都是这样。
 * 4.静态常量整形数据成员是特例，可以在类中初始化(声明时直接初始化)。(但经过测试发现，CLion中除了static之外的数据成员都可以在类中初始
 *   化)。
 * 5.静态函数成员中没有this指针这个参数。因为this指向的是实例化的对象，而静态成员函数在没有实例化时也可以调用，因此不可能使用this指针。
 * 6.同理，静态函数成员只能调用静态成员(函数/变量)，不能调用普通成员。因为普通成员在实例化对象之后才存在。
 */