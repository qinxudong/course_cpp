#include <iostream>
using namespace std;

class C0
{
public:
    int age;
    float f;

    C0()                        // 构造函数的格式:类名(){}
    {
        age = 12;
        f = 12.12f;
        cout << "This is constructor." << endl;
    }

};

class C1
{
public:
    int age;
    float f;

    C1(int a, float b=12.12f)  // 带参数的构造函数可以在创建对象时传递参数
    {
        age = a;
        f = b;
    }

    void fun(int a=14);
};

void C1::fun(int a)             // 在类外定义对象需要在函数名前面加上类名作用域
{
    cout << "Defined outside" << " " << a << endl;
}

int main()
{
    C0 o0;                      // 创建对象时会调用构造函数
    C0* p0 = new C0;            // 创建对象指针时在分配内存之后才会调用构造函数

    C1 o1(12, 12.3f);           // 创建对象时传递参数给构造函数
    cout << o1.age << " " << o1.f << endl;

    C1* p1 = new C1(13, 13.4f); // 创建对象指针时传递参数给构造函数
    cout << p1->age << " " << p1->f << endl;

    o1.fun();                   // 在类内声明，在类外定义的函数

    return 0;
}

/*
 * 1.构造函数相当于python中的__init__()函数，在创建对象时自动调用。
 * 2.类中的数据成员不能够在类中直接赋值，因为类并不占用内存，在实例化对象时才会分配内存，因此数据成员的赋值放在构造函数中进行，在创建对象
 *   时调用。
 * 3.记住，构造函数总是在分配内存之后调用。因此在C0* O0创建某类指针时不会分配内存也就不会调用构造函数，而在new C0时才会分配内存，所以此
 *   时调用构造函数。
 * 4.如果在一个类中有多个构造函数，那么这多个构造函数互为重载关系，根据创建对象时传递的参数选择构造函数。
 * 5.类中的函数(包括构造函数)可以在类内定义，也可以在类内声明然后在类外定义，此时定义时需要加上类的作用域。
 * 6.类内声明，类外定义主要应用于多文件时，在头文件定义类时声明成员函数，在源文件中include头文件后定义成员函数。
 */