//
// Created by qin on 18-12-17.
//

#include <iostream>
using namespace std;


class A
{
public:
    int a;
};

class B1 : virtual public A
{
public:
    int b;
};

class B2 : virtual public A
{
public:
    int b;
};

class C : public B1, public B2
{
public:

};



int main()
{
    C c;
//    c.b;              // 多继承时如果父类们有相同的成员，那么会相互冲突不能调用
    c.a;                // 父类们是虚继承的，那么子类继承不再有冲突

    return 0;
}


/*
 * 0.虚继承是为了解决 一个类有多个子类，从这多个子类继承时产生同名成员冲突的情况。
 * 1.多继承时如果父类们有相同的成员，那么会相互冲突不能调用。另外一种多继承的情况时，父类们同时从更上层的类继承了同样的成员，那么也会导
 *   致不能调用。此时如果父类们从上层类继承的方式是虚继承时，子类再从父类们继承就不会产生冲突了。
 * 2.虚继承的本质可以与静态成员一起理解，静态成员在所有父类、子类的对象中都是共用的，那么虚继承时，多个子类对父类的继承也是类似共用的关
 *   系，因此再从这多个子类继承的成员会是这个共用的成员，不会产生冲突。另外，因为子子类对多个子类的继承并不是虚继承，所以子子类的成员与
 *   子类和父类并不是共用的，而是相对独立的成员。
 * 3.子类虚继承父类，那么该父类称为虚基类。
 */